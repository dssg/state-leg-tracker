config_version: 'v7'
model_comment: 'deploying_national_short_term_model'
random_seed: 2383213

temporal_config:
    'feature_start_time': '2011-01-01'
    'feature_end_time': '2020-06-01' 
    'label_start_time': '2011-01-01'
    'label_end_time': '2020-06-01'
    'model_update_frequency': '2y'
    'max_training_histories': ['2y']
    'test_durations': ['0d']
    'training_as_of_date_frequencies': ['1week']
    'test_as_of_date_frequencies': ['1week']
    'label_timespans': ['1y']

# TODO: Create a table for each state on clean to avoid constant joins between bills and sessions

# Cohort: The active bills in the sessions as of today for pennsylvania (state_id==38)
# Removing the bills that didnt have any event in the last 30 days
# NOTE: Only considering regular sessions. Disregarding the special sessions
# Cohort: The active bills in the sessions as of today
cohort_config:
    query:
        "
            with all_active_bills as (
                select 
                    bill_id
                from clean.bills a
                    left join clean.sessions b using (session_id)
                        left join clean.ncsl_legiscan_linked c using (session_id)
                            left join clean.bill_progress d using (bill_id)
                where 
                    extract(year from date '{as_of_date}')::int in (b.year_start, b.year_end) 
                    and 
                    extract (year from introduced_date)::int in (b.year_start, b.year_end)
                    and
                    introduced_date < '{as_of_date}'
                    and
                    not b.special	 
                    and 
                    (adjourn_date > '{as_of_date}' or adjourn_date is null)
                    and
                    convene_date < '{as_of_date}'
                group by bill_id
                having
                    max(case when event in (4, 5, 6) then progress_date end) > '{as_of_date}'
                    or 
                    max(case when event in (4, 5, 6) then progress_date end) is null
            )
            select
                bill_id as entity_id
            from all_active_bills left join clean.bill_events using (bill_id)
            where event_date < '{as_of_date}'
            group by bill_id
            having 
                min(('{as_of_date}'::DATE - event_date::DATE)::int) < 60
        "
    name: 'active_60d'


# Including the cohort query in here to make the labels table small
label_config:
    query: |
        with cohort as (
                with all_active_bills as (
                    select 
                        bill_id,
                        max(introduced_date) as introduced_date,
                    max(case when (event=4 or event=5 or event=6)  then progress_date end) as conclude_date
                    from clean.bills a
                        left join clean.sessions b using (session_id)
                            left join clean.ncsl_legiscan_linked c using (session_id)
                                left join clean.bill_progress d using (bill_id)
                    where 
                        extract(year from date '{as_of_date}')::int in (b.year_start, b.year_end) 
                        and 
                        extract (year from introduced_date)::int in (b.year_start, b.year_end)
                        and
                        introduced_date < '{as_of_date}'
                        and
                        not b.special	 
                        and 
                        (adjourn_date > '{as_of_date}' or adjourn_date is null)
                        and
                        convene_date < '{as_of_date}'
                    group by bill_id
                    having
                        max(case when event in (4, 5, 6) then progress_date end) > '{as_of_date}'
                        or 
                        max(case when event in (4, 5, 6) then progress_date end) is null
                )
            select
                bill_id,
                max(conclude_date) as conclude_date
            from all_active_bills 
                left join clean.bill_events using (bill_id)
            where 
                event_date < '{as_of_date}'
            group by bill_id
            having 
                min(('{as_of_date}'::DATE - event_date::DATE)::int) < 60
        )
        select 
            bill_id as entity_id,
            coalesce((max((case when (progress_date=conclude_date and event=4) then progress_date end)) < '{as_of_date}'::timestamp + interval '{label_timespan}')::int, 0) as outcome
        from cohort left join clean.bill_progress using (bill_id)
        group by bill_id     
    
    name: 'bill_passed'

    include_missing_labels_in_train_as: False


# Feature engineering
feature_aggregations:
    - # static features about the bill introduction
        prefix: 'billinfo'
        from_obj: |
            (select 
                bill_id as entity_id,
                bill_type, 
                introduced_body,
                introduced_date
            from clean.bills 
                join clean.sessions using (session_id) 
            ) AS billinfo

        knowledge_date_column: 'introduced_date'
        categoricals_imputation:
            all:
                type: 'null_category'
        categoricals:
            - # the type of the bill
                column: bill_type
                choice_query: 'SELECT DISTINCT bill_type FROM clean.bills'
                metrics:
                    - 'max'
            - # The chamber the body was introduced in
                column: introduced_body
                choice_query: 'SELECT DISTINCT introduced_body FROM clean.bills'
                metrics:
                    - 'max'
        
        aggregates_imputation:
            all:
                type: 'constant'
                value: 0
        aggregates:
            - # the age of the bill ( how many days since the bill was introduced)
                quantity: 
                    bill_age: date_part('day', age('{collate_date}', introduced_date))::int 
                metrics:
                    - max
                    
        intervals: ['1d']
        
        groups:
            - 'entity_id'

    - # bill sponsors
        prefix: 'sponsors'
        from_obj: |
            (
                select
                    bill_id as entity_id,
                    max(introduced_date) as introduced_date,
                    count(*) as total_sponsors, 
                    sum(case when party_id=1 then 1 else 0 end)::float/count(*) as dems_frac,
                    sum(case when party_id=2 then 1 else 0 end)::float/count(*) as reps_frac,
                    sum(case when (party_id!=1 and party_id!=2) then 1 else 0 end)::float/count(*) as other_frac
                from clean.bills left join clean.bill_sponsors using(bill_id)
                group by bill_id
            ) AS sponsorinfo

        knowledge_date_column: 'introduced_date'
        aggregates_imputation:
            all:
                type: 'constant'
                value: 0
        aggregates:
            - # total sponsors
                quantity: 'total_sponsors'
                metrics:
                    - 'max'
            - # fraction of dems
                quantity: 'dems_frac'
                metrics:
                    - 'max'
            - # fraction of republicans
                quantity: 'reps_frac'
                metrics:
                    - 'max'
            - # fraction of other parties
                quantity: 'other_frac'
                metrics:
                    - 'max'
        intervals: ['all']
        groups:
            - 'entity_id'

    - # legislature make up
        prefix: 'chamber_makeup'
        from_obj: |
            (
                with chambers as (
                    select 
                        session_id,
                        sum(case when role_id=1 then 1 else 0 end) as house_size,
                        sum(case when role_id=2 then 1 else 0 end)as senate_size,
                        sum(case when (role_id=2 and party_id=1) then 1 else 0 end)::float/nullif(sum(case when role_id=2 then 1 else 0 end), 0) as dem_senate_control,
                        sum(case when (role_id=2 and party_id=2) then 1 else 0 end)::float/nullif(sum(case when role_id=2 then 1 else 0 end), 0) as rep_senate_control,
                        sum(case when (role_id=2 and (party_id!=2 and party_id!=1)) then 1 else 0 end)::float/nullif(sum(case when role_id=2 then 1 else 0 end),0) as other_senate_control,
                        sum(case when (role_id=1 and party_id=1) then 1 else 0 end)::float/nullif(sum(case when role_id=1 then 1 else 0 end), 0) as dem_house_control,
                        sum(case when (role_id=1 and party_id=2) then 1 else 0 end)::float/nullif(sum(case when role_id=1 then 1 else 0 end),0) as rep_house_control,
                        sum(case when (role_id=1 and (party_id!=2 and party_id!=1)) then 1 else 0 end)::float/nullif(sum(case when role_id=1 then 1 else 0 end), 0) as other_house_control
                    from clean.session_people
                    group by session_id
                )
                select
                    bill_id as entity_id,
                    session_id,
                    introduced_date,
                    senate_size,
                    house_size,
                    dem_senate_control,
                    rep_senate_control,
                    other_senate_control,
                    dem_house_control,
                    rep_house_control,
                    other_house_control
                from clean.bills left join chambers using(session_id)
            ) AS chamber_makeup

        knowledge_date_column: 'introduced_date'

        aggregates_imputation:
            all:
                type: 'constant'
                value: 0
        
        aggregates:
            - # Number of members in the senate
                quantity: 'senate_size'
                metrics:
                    - 'max'
            - # Democratic control in the senate
                quantity: 'dem_senate_control'
                metrics:
                    - 'max'
            - # Republican control in the senate
                quantity: 'rep_senate_control'
                metrics:
                    - 'max'
            - # other parties' control in the senate
                quantity: 'other_senate_control'
                metrics:
                    - 'max'
            - # Number of members in the house
                quantity: 'house_size'
                metrics:
                    - 'max'
            - # Dem control in house
                quantity: 'dem_house_control'
                metrics:
                    - 'max'
            - # Republican control in the house
                quantity: 'rep_house_control'
                metrics: 
                    - 'max'
            - # other parties' control in the house
                quantity: 'other_house_control'
                metrics:
                    - 'max'
        
        intervals: ['all']
        groups:
            - 'entity_id'

    - # bill events
        prefix: 'events'
        from_obj: |
            (
                select 
                    bill_id as entity_id,
                    event_date,
                    action,
                    chamber,
                    important
                from clean.bill_events
            ) as bill_events 
        
        knowledge_date_column: 'event_date'

        aggregates_imputation:
            all:
                type: 'constant'
                value: 0

        aggregates:
            - # number of different events in the bill
                quantity: action
                metrics:
                    - count
            - # number of important events
                quantity: important
                metrics:
                    - sum
            - # days since the last event
                quantity:
                    days_since_last_event: ('{collate_date}'::DATE - event_date::DATE)
                metrics:
                    - min
            - # days since last important event
                quantity:
                    days_since_last_important_event: CASE WHEN important=1 THEN ('{collate_date}'::DATE - event_date::DATE) END
                metrics:
                    - min
            - # number of chambers the bill has been to
                quantity: DISTINCT chamber
                metrics:
                    - count
        
        intervals: ['all']
        groups:
            - 'entity_id'

    - # session information
        prefix: 'session_info'
        from_obj: |
            (
                select 
                    bill_id as entity_id,
                    min(introduced_date) as introduced_date,
                    min(year_start) as year_start,
                    max(year_end) as year_end,
                    min(convene_date) as convene_date,
                    max(adjourn_date) as adjourn_date
                from clean.bills left join clean.ncsl_legiscan_linked using(session_id)
                group by bill_id
                having max(state_name)='pennsylvania'
            ) as session_info 
        
        knowledge_date_column: 'introduced_date'

        aggregates_imputation:
            all:
                type: 'constant'
                value: 0
        
        aggregates:
            - # Session length--It can be the same value for all years?
                quantity: 
                    session_len: (adjourn_date::DATE - convene_date::DATE)
                metrics:
                    - min
            - # How many days left in the session
                quantity:
                    remaining_time: ('{collate_date}'::DATE - convene_date::DATE)::float / (adjourn_date::DATE - convene_date::DATE)
                metrics:
                    - min

        intervals: ['all']
        
        groups:
            - 'entity_id'

# Feaure Grouping
feature_group_definition: 
    prefix: ['billinfo', 'sponsors', 'events', 'chamber_makeup', 'session_info']
  
feature_group_strategies: ['all']

grid_config:
    'sklearn.ensemble.RandomForestClassifier':
        max_features: ['sqrt']
        criterion: ['gini']
        n_estimators: [1000]
        min_samples_split: [10]
        class_weight: [~]
        max_depth: [100]
        n_jobs: [-1]
    
# scoring:
#     testing_metric_groups:
#         -
#             metrics: [precision@, recall@]
#             thresholds:
#                 percentiles: [1, 2, 3, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100]
#         -
#             metrics: [roc_auc]

    
#     training_metric_groups:
#         -
#             metrics: [recall@]
#             thresholds:
#                 percentiles: [1, 2, 3, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100]    
            
# individual_importance:
#     methods: [] # empty list means don't calculate individual importances
#     n_ranks: 1  

