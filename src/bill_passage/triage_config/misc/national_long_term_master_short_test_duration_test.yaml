config_version: 'v7'
model_comment: 'long_term_1mo_retraining_2016--2019'
random_seed: 2383213

temporal_config:
    'feature_start_time': '2016-01-01'
    'feature_end_time': '2020-01-01' 
    'label_start_time': '2016-01-01'
    'label_end_time': '2020-01-01'
    'model_update_frequency': '1month'
    'max_training_histories': ['2y']
    'test_durations': ['1month']
    'training_as_of_date_frequencies': ['1week']
    'test_as_of_date_frequencies': ['1week']
    'label_timespans': ['1y']

# Cohort: The active bills in the sessions as of today
cohort_config:
    query:
        "
            with all_active_bills as (
                select 
                    bill_id
                from clean_2.bills a
                    join clean_2.sessions b using (session_id)
                        join clean.ncsl_legiscan_linked c using (session_id)
                            left join clean_2.bill_progress d using (bill_id)
                where 
                    extract(year from date '{as_of_date}')::int in (b.year_start, b.year_end) 
                    and 
                    extract (year from introduced_date)::int in (b.year_start, b.year_end)
                    and
                    introduced_date < '{as_of_date}'
                    and
                    not b.special	 
                    and 
                    (adjourn_date > '{as_of_date}' or adjourn_date is null)
                    and
                    convene_date < '{as_of_date}'
                    and 
                    progress_date < '{as_of_date}'
                group by bill_id
                having
                    max(case when event in (4, 5, 6) then progress_date end) is null
            )
            select
                bill_id as entity_id
            from all_active_bills left join clean_2.bill_events using (bill_id)
            where event_date < '{as_of_date}'
            group by bill_id
            having 
                min(('{as_of_date}'::DATE - event_date::DATE)::int) < 60
        "
    name: 'active_60d'


# Including the cohort query in here to make the labels table small
# NOTE -- 
#    There are some bills which has several concluding events (failed, and then passes). 
#    In this definition, we use the first "pass" event as the passed date (so if the bill has any pass date, it is considered as passed)
label_config:
    query: |
        with cohort as (
            with all_active_bills as (
                select 
                    bill_id
                from clean_2.bills a
                    join clean_2.sessions b using (session_id)
                        join clean.ncsl_legiscan_linked c using (session_id)
                            left join clean_2.bill_progress d using (bill_id)
                where 
                    extract(year from date '{as_of_date}')::int in (b.year_start, b.year_end) 
                    and 
                    extract (year from introduced_date)::int in (b.year_start, b.year_end)
                    and
                    introduced_date < '{as_of_date}'
                    and
                    not b.special	 
                    and 
                    (adjourn_date > '{as_of_date}' or adjourn_date is null)
                    and
                    convene_date < '{as_of_date}'
                    and 
                    progress_date < '{as_of_date}'
                group by bill_id
                having
                    max(case when event in (4, 5, 6) then progress_date end) is null
            )
            select
                bill_id
            from all_active_bills left join clean_2.bill_events using (bill_id)
            where 
                event_date < '{as_of_date}'
            group by bill_id
            having 
                min(('{as_of_date}'::DATE - event_date::DATE)::int) < 60
        )
        select 
            bill_id as entity_id,
            (CASE WHEN passed_date  < '{as_of_date}'::timestamp + interval '{label_timespan}' THEN TRUE ELSE FALSE END)::integer AS outcome
        from cohort left join (
            select 
                bill_id, 
                min(CASE WHEN event = 4 THEN progress_date ELSE null END) AS passed_date
            from clean_2.bill_progress
            group by 1	
        ) as t using(bill_id)
    
    name: 'lt_passed'

    include_missing_labels_in_train_as: False


# Feature engineering
feature_aggregations:
    - # static features about the bill introduction
        prefix: 'billinfo'
        from_obj: |
            (select 
                bill_id as entity_id,
                bill_type, 
                introduced_body,
                introduced_date,
                state_abbreviation as state
            from clean_2.bills 
                join clean_2.sessions using (session_id) 
                    join catalogs.states using (state_id)
            ) AS billinfo

        knowledge_date_column: 'introduced_date'
        categoricals_imputation:
            all:
                type: 'null_category'
        categoricals:
            - # the type of the bill
                column: bill_type
                choice_query: 'SELECT DISTINCT bill_type FROM clean_2.bills'
                metrics:
                    - 'max'
            - # The chamber the body was introduced in
                column: introduced_body
                choice_query: 'SELECT DISTINCT introduced_body FROM clean_2.bills'
                metrics:
                    - 'max'
            - # state legislature the bill belongs to
                column: state
                choice_query: 'SELECT DISTINCT state_abbreviation FROM catalogs.states'
                metrics:
                    - 'max'
        
        aggregates_imputation:
            all:
                type: 'constant'
                value: 0
        aggregates:
            - # the age of the bill ( how many days since the bill was introduced)
                quantity: 
                    bill_age: date_part('day', age('{collate_date}', introduced_date))::int 
                metrics:
                    - max
                    
        intervals: ['all']
        
        groups:
            - 'entity_id'

    - # bill sponsors
        # TODO: track sponsor changes over time and keep track
        prefix: 'sponsors'
        from_obj: |
            (select
                bill_id as entity_id,
                max(introduced_date) as introduced_date,
                count(distinct sponsor_id) as total_sponsors, 
                CASE WHEN 
                    count(distinct sponsor_id)=0 then 0
                ELSE sum(case when party_id=1 then 1 else 0 end)::float/count(distinct sponsor_id)
                END AS dems_frac,
                CASE WHEN 
                    count(distinct sponsor_id)=0 then 0
                ELSE sum(case when party_id=2 then 1 else 0 end)::float/count(distinct sponsor_id)
                END AS reps_frac,
                CASE WHEN 
                    count(distinct sponsor_id)=0 then 0
                ELSE sum(case when (party_id!=1 and party_id!=2) then 1 else 0 end)::float/count(distinct sponsor_id)
                END AS other_frac
            from clean_2.bills left join clean_2.bill_sponsors using(bill_id)
            group by bill_id
            ) AS sponsorinfo

        knowledge_date_column: 'introduced_date'
        aggregates_imputation:
            all:
                type: 'mean'
        aggregates:
            - # total sponsors
                quantity: 'total_sponsors'
                metrics:
                    - 'max'
            - # fraction of dems
                quantity: 'dems_frac'
                metrics:
                    - 'max'
            - # fraction of republicans
                quantity: 'reps_frac'
                metrics:
                    - 'max'
            - # fraction of other parties
                quantity: 'other_frac'
                metrics:
                    - 'max'
        intervals: ['all']
        groups:
            - 'entity_id'

    - # legislature make up
        prefix: 'chamber_makeup'
        from_obj: |
            (with chambers as (
                select 
                    session_id,
                    sum(case when role_id=1 then 1 else 0 end) as hou_size,
                    sum(case when role_id=2 then 1 else 0 end)as sen_size,
                    sum(case when (role_id=2 and party_id=1) then 1 else 0 end)::float/nullif(sum(case when role_id=2 then 1 else 0 end), 0) as d_sen_ctrl,
                    sum(case when (role_id=2 and party_id=2) then 1 else 0 end)::float/nullif(sum(case when role_id=2 then 1 else 0 end), 0) as r_sen_ctrl,
                    sum(case when (role_id=2 and (party_id!=2 and party_id!=1)) then 1 else 0 end)::float/nullif(sum(case when role_id=2 then 1 else 0 end),0) as othr_sen_ctrl,
                    sum(case when (role_id=1 and party_id=1) then 1 else 0 end)::float/nullif(sum(case when role_id=1 then 1 else 0 end), 0) as d_hou_ctrl,
                    sum(case when (role_id=1 and party_id=2) then 1 else 0 end)::float/nullif(sum(case when role_id=1 then 1 else 0 end),0) as r_hou_ctrl,
                    sum(case when (role_id=1 and (party_id!=2 and party_id!=1)) then 1 else 0 end)::float/nullif(sum(case when role_id=1 then 1 else 0 end), 0) as othr_hou_ctrl
                from clean_2.session_people
                group by session_id
            )
            select
                bill_id as entity_id,
                session_id,
                introduced_date,
                sen_size,
                hou_size,
                d_sen_ctrl,
                r_sen_ctrl,
                othr_sen_ctrl,
                d_hou_ctrl,
                r_hou_ctrl,
                othr_hou_ctrl
            from clean_2.bills left join chambers using(session_id)            
            ) AS chamber_makeup

        knowledge_date_column: 'introduced_date'

        aggregates_imputation:
            all:
                type: 'mean' 
        aggregates:
            - # Number of members in the senate
                quantity: 'sen_size'
                metrics:
                    - 'max'
            - # Democratic control in the senate
                quantity: 'd_sen_ctrl'
                metrics:
                    - 'max'
            - # Republican control in the senate
                quantity: 'r_sen_ctrl'
                metrics:
                    - 'max'
            - # other parties' control in the senate
                quantity: 'othr_sen_ctrl'
                metrics:
                    - 'max'
            - # Number of members in the house
                quantity: 'hou_size'
                metrics:
                    - 'max'
            - # Dem control in house
                quantity: 'd_hou_ctrl'
                metrics:
                    - 'max'
            - # Republican control in the house
                quantity: 'r_hou_ctrl'
                metrics: 
                    - 'max'
            - # other parties' control in the house
                quantity: 'othr_hou_ctrl'
                metrics:
                    - 'max'
        
        intervals: ['all']
        groups:
            - 'entity_id'

    - # bill event counts
        prefix: 'event_counts'
        from_obj: |
            (
                select 
                    bill_id as entity_id,
                    event_date,
                    action,
                    chamber,
                    important
                from clean_2.bill_events
            ) as events 
        
        knowledge_date_column: 'event_date'

        aggregates_imputation:
            all:
                type: 'constant'
                value: 0

        aggregates:
            - # number of different events in the bill
                quantity: action
                metrics:
                    - count
            - # number of important events
                quantity: important
                metrics:
                    - sum
            - # number of chambers the bill has been to
                quantity: DISTINCT chamber
                metrics:
                    - count
        
        intervals: ['all', '1week', '2week', '1month']
        groups:
            - 'entity_id'

    - # recent events
        prefix: 'rec_evnts'
        from_obj: |
            (
                select 
                    bill_id as entity_id,
                    event_date,
                    important
                from clean_2.bill_events
            ) as events 
        knowledge_date_column: 'event_date'

        aggregates_imputation:
            all:
                type: 'constant'
                value: 0
        aggregates:
            - # days since the last event
                quantity:
                    days_since_evnt: ('{collate_date}'::DATE - event_date::DATE)
                metrics:
                    - min
            - # days since last important event
                quantity:
                    days_since_imp_evnt: CASE WHEN important=1 THEN ('{collate_date}'::DATE - event_date::DATE) END
                metrics:
                    - min
        intervals: ['all']
        groups:
            - 'entity_id'

    - # session information
        prefix: 'session_info'
        from_obj: |
            (
                select 
                    bill_id as entity_id,
                    min(introduced_date) as introduced_date,
                    min(year_start) as year_start,
                    max(year_end) as year_end,
                    min(convene_date) as convene_date,
                    max(adjourn_date) as adjourn_date
                from clean_2.bills left join clean.ncsl_legiscan_linked using(session_id)
                group by bill_id
            ) as session_info 
        
        knowledge_date_column: 'introduced_date'
        aggregates_imputation:
            all:
                type: 'constant'
                value: 0        
        aggregates:
            - # Session length--It can be the same value for all years?
                quantity: 
                    session_len: (adjourn_date::DATE - convene_date::DATE)
                metrics:
                    - min
            - # How many days left in the session
                quantity:
                    remaining_time: ('{collate_date}'::DATE - convene_date::DATE)::float / (adjourn_date::DATE - convene_date::DATE)
                metrics:
                    - min
        intervals: ['all']
        groups:
            - 'entity_id'

    - # text information. # TODO: proper imputation of the document date   
        prefix: 'txt'
        from_obj: |
            (
                select 
                    bill_id as entity_id,
                    doc_id,
                    doc_type,
                    doc_date,
                    text_size                    
                from clean_2.bill_docs
                group by 1, 2, 3, 4, 5
            ) as session_info 
        
        knowledge_date_column: 'doc_date'
        aggregates_imputation:
            all:
                type: 'constant'
                value: 0
        aggregates:
            - # number of text versions in the bil
                quantity: doc_id
                metrics:
                    - count

            - # number of amended versions
                quantity:
                    num_amended_texts: CASE WHEN doc_type ='Amended' THEN 1 ELSE 0 END
                metrics:
                    - sum
                imputation:
                    all:
                        type: 'zero_noflag'

            - # bill sizes
                quantity: text_size
                metrics:
                    - max
                    - min
                imputation:
                    all:
                        type: 'mean'
        intervals: ['all', '1week', '2week', '1month']
        groups:
            - 'entity_id'

    - # most recent changes
        prefix: 'rec_txt'
        from_obj: |
            (
                select 
                    bill_id as entity_id,
                    doc_id,
                    doc_type,
                    doc_date,
                    text_size                    
                from clean_2.bill_docs
                group by 1, 2, 3, 4, 5
            ) as session_info 
        
        knowledge_date_column: 'doc_date'
        aggregates_imputation:
            all:
                type: 'constant'
                value: 0
        aggregates:
            - # days since last version
                quantity: 
                    days_since_last_version: ('{collate_date}'::DATE - doc_date::DATE)
                metrics:
                    - min

            - # days since the last amendment
                quantity:
                    days_since_amendment: CASE WHEN doc_type ='Amended' THEN '{collate_date}'::DATE - doc_date::DATE ELSE NULL END
                metrics:
                    - min
        intervals: ['all']
        groups:
            - 'entity_id'


# Feaure Grouping
feature_group_definition: 
    prefix: [
        'billinfo', 
        'sponsors', 
        'chamber_makeup', 
        'event_counts', 
        'rec_evnts', 
        'session_info', 
        'txt',
        'rec_txt'
    ]
  
feature_group_strategies: ['all']

grid_config:
    'sklearn.dummy.DummyClassifier':
        strategy: [most_frequent]
    
    # 'sklearn.tree.DecisionTreeClassifier':
    #     max_depth: [3, 5, 25, 50, 100]
    #     min_samples_split: [2,5,25]
    #     criterion: ['gini']

    'triage.component.catwalk.estimators.classifiers.ScaledLogisticRegression':
        C: [0.01, 0.1, 1.0]
        penalty: ['l1']

    'sklearn.ensemble.RandomForestClassifier':
        max_features: ['sqrt']
        criterion: ['gini']
        n_estimators: [1000, 2000]
        min_samples_split: [10, 50]
        class_weight: [~]
        max_depth: [25, 50]
        n_jobs: [-1]

    # 'sklearn.ensemble.AdaBoostClassifier':
    #     n_estimators: [500, 1000]

scoring:
    testing_metric_groups:
        -
            metrics: [precision@, recall@]
            thresholds:
                percentiles: [1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100]
                top_n: [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]
        -
            metrics: [roc_auc]

    
    training_metric_groups:
        -
            metrics: [precision@, recall@]
            thresholds:
                percentiles: [1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100]    
                top_n: [50, 100, 200, 300, 500, 600, 700, 800, 900, 1000]


individual_importance:
    methods: [] # empty list means don't calculate individual importances
    n_ranks: 1  

